#!/bin/bash
set -euo pipefail

# ----------------------------
# Note about $ENVFILE signing:
# ----------------------------
# Signing the $ENVFILE is done to prevent attacks that drop a $ENVFILE 
# in a archive or a repo or something similar in the hope that the victem
# will execute it during *lxcenv* execution. Attacker control over the $ENVFILE 
# is equivalent to code exection on the victem system. Therefore we
# sign the $ENVFILE with a (before) generated gpg key and check the signature
# before the content is used. This way an attacker needs to provide a $ENVFILE
# with a valid signature. 
# An attacker could still trick the user to import a public key named $GPGKEYNAME
# and then provide a attacker signed $ENVFILE...



ENVFILE=.lxcenv.asc
LXCSHARE="$HOME/.local/share/lxc"
GPGKEYNAME="lxcenv-protection"

if btrfs filesystem df "$LXCSHARE" &>/dev/null; then
    BACKINGSTORE="btrfs"
else
    BACKINGSTORE="dir"
fi

# helper

error() {
    echo "[!] ${1:-}" 1>&2
    exit 1
}

container_is_running() {
    lxc-info -n "$1" | grep -P "State:\s+RUNNING" >/dev/null
}

container_eth0_ip() {
    lxc-info -n "$1" | grep IP | head -1 | sed 's/ //g' | cut -d':' -f2
}

container_kill() {
    if [ "$1" != "all" ]; then
	container_is_running "$1" && lxc-stop -kn "$1"
    else
	# kill them all
	for c in $(lxc-ls); do
	    container_is_running "$c" && lxc-stop -kn "$c"
	done
    fi
}

# src: https://unix.stackexchange.com/questions/6463/find-searching-in-parent-directories-instead-of-subdirectories
find_up() {
    start_path="$1"
    end_path="$2"
    shift 2
    cur_path="$start_path"

    while [ "$cur_path" != "$end_path" ];
    do
	found=$(find "$cur_path" -maxdepth 1 -mindepth 1 $@)
	[ "$found" != "" ] && echo "$found" && return
	cur_path="$(realpath "$cur_path"/..)"
    done
}

init_gpg_key() {
    gpg --list-keys | grep "$GPGKEYNAME" >/dev/null && return
    cat <<EOF > gpg_settings
%no-protection
Key-Type: default
Subkey-Type: default
Name-Real: $GPGKEYNAME
Name-Email: lxcenv@localhost
Expire-Date: 0
EOF
    gpg --batch --gen-key gpg_settings
    rm gpg_settings
}  

resign_envfile() {
    envfile="$1"

    # When we resign a $ENVFILE it is expected that the signature does not mach anymore.
    # In this case we can just ignore it.
    env_content=$(cat "$envfile" | grep -e '----BEGIN PGP SIGNATURE----' -B1 | head -1)

    # resign the content
    echo "$env_content" | gpg --default-key "$GPGKEYNAME" -a -o "$envfile" --clear-sign -
}

read_envfile() {
    envfile="$1"
    content=$(gpg -o- --verify "$envfile" 2> /dev/null)
    if [ $? -eq 0 ]; then
	echo "$content"
    else
	error "Bad signature: $envfile"
    fi
}

# commands

new() {
    name="$1"
    template="$2"

    [ -f "$ENVFILE" ] && error "$ENVFILE already exists"

    # save the signed container name to $ENVFILE
    echo "$name" | gpg --default-key "$GPGKEYNAME" -a -o "$ENVFILE" --clear-sign -

    container_kill "$template"

    # create a new container from the template
    echo lxc-copy -B "$BACKINGSTORE" -n "$template" -N "$name" 
    lxc-copy -B "$BACKINGSTORE" -n "$template" -N "$name" || error "Failed to create new container $name from $template"

    # add new home mount entry to the container config
    container_config="$LXCSHARE/$name/config"
    echo "lxc.mount.entry = $PWD mnt none bind,rw 0 0" >> "$container_config"
}

delete() {
    name="$1"
    [ -f "$ENVFILE" ] && rm -f "$ENVFILE"
    container_is_running "$name" && container_kill "$name"
    #lxc-destroy -n "$name"
    sudo rm -rf "$LXCSHARE/$name"
}

run() {
    name="$1"
    shift 1

    # Note: always keep $attach_args at the end such that we
    #       can use -- for running commands inside the container
    attach_args="${@:-}"

    # if no -u option is given by the user set -u 1000 -g 1000 as default
    echo $attach_args | grep -e '-u' > /dev/null || attach_args="-u 1000 -g 1000 $attach_args"
    attach_args="--clear-env -v TERM=xterm -v DISPLAY=:0 $attach_args"

    container_is_running "$name" || lxc-unpriv-start -n "$name"
    cmd="lxc-unpriv-attach -n $name $attach_args"
    echo "$cmd"
    $cmd
}

list() {
    lxc-ls -f
}

help() {
    cat << EOF
Usage: lxc <cmd> <cmd-args>
Cmd:
  [h]elp
  [r]run <container-name> <lxc-args>
  [k]ill <container-name>
  [n]ew <conainer-name> <template-name>
  [d]elete <container-name>
  [l]ist
  resign <path-to-lxcenv-file>

Note: You can also add arguments which are passed
      to the *run* command in the $ENVFILE file like so:
      cat $ENVFILE
      '''
      test-container -L/tmp/\$(date +"%Y-%m-%d-%H_%M_%S")-aaa.log -- /usr/bin/zsh
      '''

EOF
}


# make sure we have our lxcenv gpg key
init_gpg_key


# argument parsing

cmd="${1:-help}"

case "$cmd" in
"h" | "help")
    help
    ;;
"r" | "run")
    # lxc r 
    # lxc r <-XXX>
    # lxc r <name>
    # lxc r <name> <lxc-args>
    lxc_args=""
    if [ $# -eq 1 ] || echo "$2" | grep -e '^-' >/dev/null; then
	# no container name was given, try to get one from the $ENVFILE
	found_env=$(find_up "$PWD" "$HOME" -iname "$ENVFILE")
	[ "$found_env" == "" ] && error "Can't find $ENVFILE"
	name=$(read_envfile "$found_env" | cut -d' ' -f1)
	if [ $# -eq 1 ]; then
	    # There are no user arguments passed, take optencial arguments
	    # from the $ENVFILE
	    lxc_args=$(read_envfile "$found_env" | sed "s/^$name//" | cut -d' ' -f2-)
	    lxc_args=`eval "echo $lxc_args"`
	    # remove the *run* command from the arguments, when *run* is the
	    # only argument passed by the user
	    shift
	fi
    fi

    # if there is a second argument and it does not start with "-" then this must be
    # the container name
    [ $# -ge 2 ] && echo "$2" | grep -ve '^-' >/dev/null && name="$2" && shift 2
    # for the case when lxc run -XXX .. is passed, remove the *run* command from $@
    [ $# -ge 2 ] && echo "$2" | grep -e  '^-' >/dev/null && shift
    run "$name" "$lxc_args" "$@"
    ;;
"k" | "kill" | "stop")
    [ $# -ne 2 ] && error "Please provide an <container-name> or *all* to"
    container_kill "$2"
    ;;
"n" | "new")
    [ $# -le 2 ] && error "Command *new* needs a <name> and a <template> as argument"
    name="$2"
    template="$3"
    new "$name" "$template"
    ;;
"d" | "del" | "delete")
    [ $# -le 1 ] && error "Command *delete* needs a <name> as argument"
    name="$2"
    delete "$name"
    ;;
"l" | "ls" | "list")
    list
    ;;
"resign") 
    envfile="${2:-$ENVFILE}"
    [ -f "$envfile" ] || error "Can't find $envfile"
    resign_envfile "$envfile"
    ;;
"test")
    read_envfile "$ENVFILE"
    ;;
esac
